default_platform(:android)

platform :android do
    def increment_version_code()
        path = '../app/build.gradle'
		re = /versionCode\s+(\d+)/

		s = File.read(path)
		versionCode = s[re, 1].to_i
		s[re, 1] = (versionCode + 1).to_s

		f = File.new(path, 'w')
		f.write(s)
		f.close
    end

    def increment_version_number(bump_type: nil, version_number: nil)
		path = '../app/build.gradle'
		re = /versionName\s+("\d+.\d+.\d+")/
		s = File.read(path)
		versionName = s[re, 1].gsub!('"','').split('.')

		major = versionName[0].to_i
		minor = versionName[1].to_i
		patch = versionName[2].to_i

		if (bump_type == 'major')
			major += 1
			minor = 0
			patch = 0
		elsif (bump_type == 'minor')
			minor += 1
			patch = 0
		elsif (bump_type == 'patch')
			patch += 1
		end

		if(version_number)
			s[re, 1] = "\"#{version_number}\""
		else
			s[re, 1] = "\"#{major}.#{minor}.#{patch}\""
		end

		f = File.new(path, 'w')
		f.write(s)
		f.close
		increment_version_code()
    end

    def updateVersion(options)
		if options[:version]
			version = options[:version]
		else
			version = prompt(text: "Enter the version type or specific version\n(major, minor, patch or 1.0.0): ")
		end

		re = /\d+.\d+.\d+/
		versionNum = version[re, 0]

		if (versionNum)
			increment_version_number(
			  version_number: versionNum
			)
		elsif (version == 'major' || version == 'minor' || version == 'patch')
			increment_version_number(
			  bump_type: version
			)
		else
			UI.user_error!("[ERROR] Wrong version!!!!!!")
		end
    end

    desc "Runs all the tests"
    lane :test do
		gradle(task: "test")
    end

    desc "Codepush to android release "
        lane :codepush_to_release do
    	    increment_version_code()
    	    gradle(
    	        task: "assemble",
    	        build_type: "Release"
    	    )
    	    appcenter_upload(
    	        api_token:ENV['APPCENTER_API_TOKEN'],
    	        owner_name: "Gabojait",
    	        owner_type: "organization",
    	        app_name: "Gabojait_Android",
    	        file: "./app/releaseStaging/app-releaseStaging.aab",
    	        notify_testers: true
    	    )
        end

    desc "Codepush to android staging track "
    lane :codepush_to_staging do
	    increment_version_code()
	    gradle(
	        task: "assemble",
	        build_type: "Release"
	    )
	    appcenter_codepush_release_react(
	        api_token: ENV['APPCENTER_API_TOKEN'],
	        owner_name: "Gabojait",
	        app_name: "Gabojait_Android",
	        deployment: "Staging"
	    )
    end

	desc "Build"
	lane :build do
		gradle(
		    task: "assemble",
		    build_type: "Release"
		)
	end

	desc "Submit a new version to the internal track in the Google Play"
	lane :deploy_internal do |options|
		gradle(task: "clean")
		gradle(
		    task: "bundle",
		    build_type: "Release"
		)
		upload_to_play_store(track: "internal")
		slack(
          message: "Android Gabojait 버전 #{new_version_number} - 구글 내부 테스트 업로드 완료",
          slack_url: ENV['SLACK_URL']
    )
		end

    desc "Deploy a new version to the Google Play"
    lane :deploy do
      updateVersion
      gradle(task: "clean bundleRelease")
	    upload_to_play_store(
		    skip_upload_metadata: false,
		    skip_upload_changelogs: false,
		    skip_upload_screenshots: false,
		    skip_upload_images: false,
		    skip_upload_apk: false
	    )
		  slack(
		    message: "Android Gabojait 버전 #{new_version_number} - 구글 플레이 업로드 완료",
		    slack_url: ENV['SLACK_URL']
		  )
	end
end


