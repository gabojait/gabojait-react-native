# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

	require 'json'

# 	before_all do |_lane, options|
# 		ENV["FASTLANE_USER"]="nogamsung97@gmail.com"
# 		ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"]="okhc-upqj-liwj-bfhc"
# 		ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
# 	end
# //TODO: 빌드&테스트는 브랜치 액션으로 자동화하고 테스트&릴리즈 배포는 명령어로 수행하도록!
	desc "Runs all the tests"
	lane :test do
		match(type: "appstore")
    run_tests(
      workspace: "gabojait.xcworkspace",
      scheme: "gabojait",
      clean: true
      )
	end

	desc "Build"
	lane :build do
		match(type: "appstore")
		increment_build_number(xcodeproj: "gabojait.xcodeproj")
		build_app(workspace: "gabojait.xcworkspace", scheme: "gabojait")
	end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    match(type: "appstore")
    upload_to_testflight
    version_number = get_version_number(xcodeproj: "gabojait.xcodeproj")
    build_number = get_build_number.to_i
    slack(
      message: "iOS Gabojait 버전 #{version_number} - TestFlight 업로드 완료",
      payload: { "Version": version_number + "(" + build_number.to_s + ")" },
    )
  end

  desc "Push a new release hotfix update through Codepush"
  lane :codepush_release do
    match(type: "appstore")
    #codepush_staging으로 디버깅을 끝내고 실행하는 걸 전제로 두기때문에 hotifix version 업데이트 하지 않음
    version_number = get_version_number(xcodeproj: "gabojait.xcodeproj")
    hotfix_number = read_and_parse_json('../../package.json')['hotfixVersion'].to_i
    appcenter_codepush_release_react(
      api_token: ENV['APPCENTER_API_TOKEN'],
      owner_name: "Gabojait",
      app_name: "Gabojait_iOS",
      dsym: "../www/gabojait.app.dSYM.zip",
      description:"version #{version_number}-#{hotfix_number}",
      notify_testers: true
     )
  end

	desc "Push a new staging hotfix update through Codepush"
	lane :codepush_staging do
		match(type: "appstore")
		increment_hotfix_number
    version_number = get_version_number(xcodeproj: "gabojait.xcodeproj")
    hotfix_number = read_and_parse_json('../../package.json')['hotfixVersion'].to_i

		appcenter_upload(
		  api_token: ENV['APPCENTER_API_TOKEN'],
		  owner_name: "Gabojait",
		  app_name: "Gabojait_iOS",
		  file:"./gabojait.ipa",
		  release_notes: "version #{version_number} -#{hotfix_number} \n Staging distribute 업로드 테스트",
		  notify_testers: true
		)
	end

  desc "Push a new release build to the App Store"
    lane :release do |options|
      if options[:version]
        match(type: "appstore")
        handle_semantic_version_number(bump_type: options[:version])
	      upload_to_app_store(
	        reject_if_possible: false,
	        force: true,
	        skip_screenshots: false,
          skip_metadata: false,
          language:["ko"],
	        submit_for_review: true,
	        automatic_release: true,
	      )
	      slack(
	        message: "iOS Gabojait 버전 #{new_version_number} - App Store 배포 완료",
	        slack_url: ENV['SLACK_URL']
	      )
	      sh "watchbuild"
	      end
    end

    desc "test increment_version_number"
    lane :test_version_number do |options|
      increment_version_number(version_number: options[:version], xcodeproj:"gabojait.xcodeproj")
      new_version_number = get_version_number(xcodeproj: "gabojait.xcodeproj")
      puts "updated version_number to #{new_version_number}"
    end

    def handle_semantic_version_number(bump_type: nil)
      if ["major", "minor", "patch"].include?(bump_type)
	      increment_version_number(bump_type:bump_type, xcodeproj:"gabojait.xcodeproj")
	      new_version_number = get_version_number(xcodeproj: "gabojait.xcodeproj")
	      update_package_version(new_version_number)
	      initialize_hotfix_number
	    end
    end

    def update_package_version(new_version)
      path = '../../package.json'
      data = read_and_parse_json(path)
      data['version'] = new_version
      updated_data = JSON.pretty_generate(data)

      write_updated_json(path,updated_data)
      puts "package version updated to #{data['hotfixVersion']} in #{path}"
      end

    def increment_hotfix_number
      path = '../../package.json'
      data = read_and_parse_json(path)
      hotfix_version = data.fetch('hotfixVersion').to_i
      data['hotfixVersion'] = (hotfix_version + 1).to_s
      updated_data = JSON.pretty_generate(data)

      write_updated_json(path,updated_data)
      puts "hotfixVersion updated to #{data['hotfixVersion']} in #{path}"
    	end

    	def initialize_hotfix_number
    		path = '../../package.json'
        data = read_and_parse_json(path)
        data['hotfixVersion'] = "0"
        updated_data = JSON.pretty_generate(data)

        write_updated_json(path,updated_data)
        puts "hotfixVersion initialized to #{data['hotfixVersion']} in #{path}"
    	end

    	def read_and_parse_json(file_path)
        json_data = File.read(file_path)
        JSON.parse(json_data)
      end

    	def write_updated_json(file_path, updated_json_data)
        # 파일에 쓰기
        File.open(file_path, 'w') do |file|
          file.puts(updated_json_data)
        end
      end
end
